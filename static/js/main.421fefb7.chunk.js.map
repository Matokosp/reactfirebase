{"version":3,"sources":["components/TodoApp.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["dbRef","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","collection","doc","TodoApp","didMount","didMountRef","useRef","useEffect","current","useDidMount","useState","task","setTask","tasklist","setTaskList","a","itemToaddId","Math","floor","random","itemToAdd","update","todos","FieldValue","arrayUnion","JSON","parse","e","id","preventDefault","filter","t","taskEvent","console","log","arrayRemove","stringify","element","findIndex","elem","newTaskList","isCompleted","taskListToString","forEach","push","newTask","set","temp","get","data","length","map","item","fetchData","className","type","name","onChange","target","value","handleChange","placeholder","onClick","taskCompleted","deletetask","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.421fefb7.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport \"./todoapp.css\";\nimport firebase from \"firebase\";\nimport db from \"../firebase\";\n\n  function useDidMount() {\n    const didMountRef = useRef(true);\n    \n    useEffect(() => {\n      didMountRef.current = false;\n    }, []);\n    return didMountRef.current;\n  };\n\n  const dbRef = db.collection('todos').doc('list');\n\nfunction TodoApp() {\n  const didMount=useDidMount()\n  const [task, setTask] = useState(\"\");\n  const [tasklist, setTaskList] = useState([]);\n\n\nuseEffect(() => {\n    async function fetchData(){\n      let temp = []\n      const data=await dbRef.get();\n      //if the array with the list of tasks is empty,\n      // the tasklist array will be empty\n      // and we will not have an error trying\n      //to map through an empty array.\n      if(data.data().todos.length > 0){\n      data.data().todos.map(item=>\n          temp.push(JSON.parse(item) )\n      )}\n    setTaskList(temp)\n    }\n\n    if(didMount){\n      fetchData()\n    }\n},[didMount])\n\n  const handleChange = (e) => {\n    setTask(e.target.value);\n  };\n\n  async function AddTask () {\n    if (task !== \"\") {\n      // every time we add a new task, the previous tasks\n      // are added to the database as strings\n\n      // const taskListToString =[]\n      // tasklist.forEach((element)=>\n      //   taskListToString.push(JSON.stringify(element))\n      // );\n\n      const itemToaddId= \"\\\"id\\\"\" + \":\\\"\" + Math.floor(Math.random() * 1000) +\"\\\"\"\n      const itemToAddValue= \"\\\"value\\\"\" + \":\\\"\" + task +\"\\\"\"\n      const itemToAddCompleted = \"\\\"isCompleted\\\"\" + \":false\"\n      const itemToAdd= \"{\"+itemToaddId+\",\"+itemToAddValue+\",\"+itemToAddCompleted+\"}\"\n\n      // const newTask = {todos: [...taskListToString, itemToAdd]}\n      // await dbRef.set(newTask)\n\n      dbRef.update({   \n              todos: firebase.firestore.FieldValue.arrayUnion(itemToAdd)\n      })\n\n      // updating the tasks lists locally. We're not fetching\n      // the db list again to update the app.\n\n      setTaskList([...tasklist, JSON.parse(itemToAdd)])\n    }\n  };\n\n\n  async function deletetask (e, id) {\n    e.preventDefault();\n    setTaskList(tasklist.filter((t) => t.id != id));\n\n    // send the new tasklist without the deleted task to the db\n\n    // const taskListToString =[]\n    // const filteredTaskList = tasklist.filter((t) => t.id != id)\n    // filteredTaskList.forEach((element)=>\n    //   taskListToString.push(JSON.stringify(element))\n    // );\n\n    // const newTaskList = {todos: [...taskListToString]}\n    // await dbRef.set(newTaskList)\n\n    const taskEvent = tasklist.filter((t) => t.id === id)\n    console.log(taskEvent)\n\n    dbRef.update({   \n        todos: firebase.firestore.FieldValue.arrayRemove(JSON.stringify(taskEvent[0]))\n    })\n    \n  };\n\n  async function taskCompleted  (e, id) {\n    e.preventDefault();\n    //let's find index of element\n    const element = tasklist.findIndex((elem) => elem.id == id);\n\n    //copy array into new variable\n    const newTaskList = [...tasklist];\n\n    //edit our element\n    newTaskList[element] = {\n      ...newTaskList[element],\n      isCompleted: true,\n    };\n    \n    setTaskList(newTaskList);\n\n    // the above code changed the todo list locally\n    // after the change is made, the new lists with\n    // the completed tasks is sent to the db asynchronously\n    // with the set method\n      \n    const taskListToString =[]\n    newTaskList.forEach((element)=>\n      taskListToString.push(JSON.stringify(element))\n    );\n\n    const newTask = {todos: [...taskListToString]}\n    await dbRef.set(newTask)\n\n\n  };\n\n\n  return (\n    <div className=\"todo\">\n      <input\n        type=\"text\"\n        name=\"text\"\n        id=\"text\"\n        onChange={(e) => handleChange(e)}\n        placeholder=\"Add task here...\"\n      />\n      <button className=\"add-btn\" onClick={AddTask}>\n        Add\n      </button>\n      <br />\n      {tasklist !== [] ? (\n        <ul>\n          {tasklist.map((t) => (\n            <li className={t.isCompleted ? \"crossText\" : \"listitem\"}>\n              {t.value}\n              <button\n                className=\"completed\"\n                onClick={(e) => taskCompleted(e, t.id)}\n              >\n                Completed\n              </button>\n\n              <button className=\"delete\" onClick={(e) => deletetask(e, t.id)}>\n                Delete\n              </button>\n            </li>\n          ))}\n        </ul>\n      ) : null}\n    </div>\n  );\n}\n\nexport default TodoApp;\n","//  // Your web app's Firebase configuration\n//   // For Firebase JS SDK v7.20.0 and later, measurementId is optional\n//   var firebaseConfig = {\n\n//   };\n//   // Initialize Firebase\n//   firebase.initializeApp(firebaseConfig);\n//   firebase.analytics();\n\nimport firebase from \"firebase\";\n\n\nconst firebaseApp = firebase.initializeApp({\n    apiKey: \"AIzaSyAFcMykDdfk4Lbrmf5jTE3eX52FR8Qr3tM\",\n    authDomain: \"todoapp-ba1c0.firebaseapp.com\",\n    databaseURL: \"https://todoapp-ba1c0-default-rtdb.firebaseio.com/\",\n    projectId: \"todoapp-ba1c0\",    \n    storageBucket: \"todoapp-ba1c0.appspot.com\",\n    messagingSenderId: \"1019299984887\",\n    appId: \"1:1019299984887:web:f8dd3f0707cde236b8eaf2\",\n    measurementId: \"G-FBH1X7ZJYT\"\n});\n\nconst db = firebaseApp.firestore();\n// const auth = firebase.auth();\n\nexport default db;","import React from \"react\";\nimport \"./App.css\";\nimport TodoApp from \"./components/TodoApp\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <span className=\"title\">Todo List</span> <br />\n      <TodoApp />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}